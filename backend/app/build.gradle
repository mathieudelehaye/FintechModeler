plugins {
    id 'org.springframework.boot' version '3.1.2'
    id 'io.spring.dependency-management' version '1.1.0'
    id 'java'
}

group = 'org.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

repositories {
    mavenCentral()
}

configurations {
    // Use a dedicated configuration for development-only dependencies
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
}

dependencies {
    // Spring Boot starters
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.1.0'

    // In-memory database
    runtimeOnly 'com.h2database:h2'

    // Native interop via JNA
    implementation 'net.java.dev.jna:jna:5.13.0'
    implementation 'net.java.dev.jna:jna-platform:5.13.0'

    // DevTools for automatic restart
    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    // Testing
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

tasks.named('bootRun') {
    mainClass.set('org.example.fintechmodeler.FintechModelerApplication')
}

def nativeDir = "../dll/x64/Debug"  // Windows DLL path only

// Task for Windows DLL only since Linux .so is handled in Docker
task copyWindowsLib(type: Copy) {
    from nativeDir
    include "fintech_model.dll"
    into("$buildDir/resources/main/win32-x86-64")
}

// Make sure copy task runs before processResources
processResources.dependsOn copyWindowsLib

springBoot {
    buildInfo()
}

bootJar {
    from(nativeDir) {
        into 'BOOT-INF/classes/win32-x86-64'
    }
    // Create a layered JAR for size optimisation
    layered { }
}